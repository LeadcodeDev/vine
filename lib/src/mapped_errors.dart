const mappedErrors = {
  'string': 'The field {name} must be a string',
  'number': 'The field {name} must be a number',
  'unique': 'The field {name} must be unique',
  'email': 'The field {name} must be a valid email address',
  'phone': 'The field {name} must be a valid phone number',
  'ipAddress': 'The field {name} must be a valid {version} address',
  'regex': 'The field {name} must match the pattern {pattern}',
  'url': 'The field {name} must be a valid URL',
  'alpha': 'The field {name} must contain only alphabetic characters',
  'alphaNumeric': 'The field {name} must contain only alphabetic and numeric characters',
  'minLength': 'The field {name} must be at least {min} characters long',
  'maxLength': 'The field {name} must be at most {max} characters long',
  'fixedLength': 'The field {name} must be exactly {length} characters long',
  'startWith': 'The field {name} must start with {value}',
  'endWith': 'The field {name} must end with {value}',
  'missingProperty': 'The field {name} is required',
  'confirmed': 'The field {name} and {attemptedName}',
  'uuid': 'The field {name} must be a valid UUID',
  'creditCard': 'The field {name} must be a valid credit card number',
  'range': 'The field {name} must be between {values}',
  'negative': 'The field {name} must be a negative number',
  'positive': 'The field {name} must be a positive number',
  'min': 'The field {name} must be at least {min}',
  'max': 'The field {name} must be at most {max}',
  'double': 'The field {name} must be a double',
  'integer': 'The field {name} must be an integer',
  'boolean': 'The field {name} must be a boolean',
  'enum': 'The field {name} must be one of {values}',
  'array': 'The field {name} must be an array',
  'array.minLength': 'The field {name} must have at least {min} items',
  'array.maxLength': 'The field {name} must have at most {max} items',
  'array.fixedLength': 'The field {name} must have exactly {length} items',
  'object': 'The field {name} must be an object',
  'union': 'The field {name} must be one of the specified types {types}',
  'sameAs': 'The field {name} must be the same as {field}',
  'notSameAs': 'The field {name} must not be the same as {field}',
  'inList': 'The field {name} must be one of the specified values {values}',
  'notInList': 'The field {name} must not be one of the specified values {values}',
  'requiredIfExists': 'The field {name} is required',
  'requiredIfExistsAny': 'The field {name} is required',
  'date': 'The field {name} must be a valid date',
  'date.required': 'The field {name} is required',
  'date.before': 'The field {name} must be before {date}',
  'date.after': 'The field {name} must be after {date}',
  'date.between': 'The field {name} must be between {start} and {end}',
  'date.beforeField': 'The field {name} must be before {field}',
  'date.afterField': 'The field {name} must be after {field}',
  'date.betweenFields': 'The field {name} must be between {start} and {end}',
};
